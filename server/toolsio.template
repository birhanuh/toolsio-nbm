
map $http_upgrade $connection_upgrade {
  default Upgrade;
  '' close;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    #server_name toolsio.com *.toolsio.com;
    #root app/public

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    #server_name toolsio.com *.toolsio.com;
    #root app/public

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    #ssl_certificate /etc/letsencrypt/live/toolsio.com/fullchain.pem;
    #ssl_certificate_key /etc/letsencrypt/live/toolsio.com/privkey.pem;
    ssl_certificate /etc/nginx/certs/api.toolsio.com.crt;
    ssl_certificate_key /etc/nginx/certs/api.toolsio.com.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    #ssl_dhparam /path/to/dhparam.pem;

    # intermediate configuration. tweak to your needs.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security max-age=15768000;

    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    #ssl_stapling on;
    #ssl_stapling_verify on;

    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

    resolver 8.8.8.8; ## Points to Googles DNS address

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    location /subscriptions {
      proxy_pass http://web:8080/subscriptions;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_buffering off;
    }

    location /graphql {
      proxy_pass http://web:8080; ## Locally dns would be http://localhost:8080
    }

    location /uploads {
      alias /uploads/;
      gzip_static on; ## Compresses fiels when poissible
      expires max; ## To cache the file if poissible. We set it to max cos the images never change, their names or routes never change. It always gonna match the same  image so, there is no reason to expire the cache. 
      add_header Cache-Control private; # We set it to private since images are private information 
    }

    location /images/ {
      root /data;
    }

    #error_page 404 /404.html;
    #  location = /40x.html {
    #}

    #error_page 500 502 503 504 /50.html;
    #  location = /50x.html {
    #}
}
